import React, { useState, useEffect } from 'react';
import { AnimatePresence } from 'framer-motion';
import Confetti from 'react-confetti';
import './App.css';

// Components
import NameDialog from './components/NameDialog';
import MainContent from './components/MainContent';
import BackgroundEffects from './components/BackgroundEffects';
import AudioPlayer from './components/AudioPlayer';
import MessageWall from './components/MessageWall';
import VirtualGiftBox from './components/VirtualGiftBox';
import SocialShare from './components/SocialShare';

// Types
interface UserData {
  name: string;
  wishes: string;
  poem: string;
}

function App() {
  const [showDialog, setShowDialog] = useState(true);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [showConfetti, setShowConfetti] = useState(false);
  const [isPlaying, setIsPlaying] = useState(false);

  // Auto play music after 1 second
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsPlaying(true);
    }, 1000);
    return () => clearTimeout(timer);
  }, []);

  const handleNameSubmit = (name: string) => {
    // Generate wishes
    const wishes = generateWishes(name);
    
    // Generate poem (simplified for now)
    const poem = generatePoem(name);
    
    setUserData({ name, wishes, poem });
    
    // Show confetti
    setShowConfetti(true);
    setTimeout(() => setShowConfetti(false), 5000);
    
    // Hide dialog
    setTimeout(() => {
      setShowDialog(false);
    }, 1500);
  };

  const generateWishes = (name: string): string => {
    const wishesList = [
      `Ch√∫c ${name} lu√¥n xinh ƒë·∫πp, r·∫°ng r·ª° nh∆∞ nh·ªØng b√¥ng hoa m√πa xu√¢n! üå∏`,
      `Mong ${name} lu√¥n m·∫°nh m·∫Ω, t·ª± tin v√† th√†nh c√¥ng trong m·ªçi vi·ªác! üí™`,
      `Ch√∫c ${name} c√≥ m·ªôt ng√†y 20/10 th·∫≠t √Ω nghƒ©a v√† h·∫°nh ph√∫c! üéä`,
      `Mong ${name} lu√¥n ƒë∆∞·ª£c y√™u th∆∞∆°ng v√† tr√¢n tr·ªçng! üíï`,
      `Ch√∫c ${name} lu√¥n t·ªèa s√°ng v·ªõi n·ª• c∆∞·ªùi t∆∞∆°i t·∫Øn! ‚ú®`,
      `Mong ${name} lu√¥n kh·ªèe m·∫°nh, vui v·∫ª v√† may m·∫Øn! üçÄ`,
      `Ch√∫c ${name} lu√¥n t·ª± tin v√† theo ƒëu·ªïi ∆∞·ªõc m∆° c·ªßa m√¨nh! üåü`,
      `Mong ${name} lu√¥n ƒë∆∞·ª£c bao quanh b·ªüi nh·ªØng ng∆∞·ªùi y√™u th∆∞∆°ng! üíñ`
    ];
    
    return wishesList[Math.floor(Math.random() * wishesList.length)];
  };

  const generatePoem = (name: string): string => {
    const poems = [
      `Ch√∫c m·ª´ng ${name} ng√†y 20/10\nT∆∞∆°i ƒë·∫πp nh∆∞ hoa, r·∫°ng r·ª° nh∆∞ sao\nMong b·∫°n lu√¥n vui v·∫ª, h·∫°nh ph√∫c\nV√† th√†nh c√¥ng trong m·ªçi vi·ªác l√†m!`,
      `${name} ∆°i, ng√†y ph·ª• n·ªØ ƒë√£ v·ªÅ\nCh√∫c b·∫°n lu√¥n xinh ƒë·∫πp, kh·ªèe m·∫°nh\nMong b·∫°n lu√¥n t·ª± tin, m·∫°nh m·∫Ω\nV√† t·ªèa s√°ng nh∆∞ √°nh m·∫∑t tr·ªùi!`,
      `G·ª≠i l·ªùi ch√∫c ƒë·∫øn ${name} th√¢n y√™u\nNg√†y 20/10 th·∫≠t √Ω nghƒ©a\nCh√∫c b·∫°n lu√¥n h·∫°nh ph√∫c, vui v·∫ª\nV√† th√†nh c√¥ng trong cu·ªôc s·ªëng!`
    ];
    
    return poems[Math.floor(Math.random() * poems.length)];
  };

  return (
    <div className="app">
      {/* Background Effects */}
      <BackgroundEffects />
      
      {/* Confetti */}
      {showConfetti && (
        <Confetti
          width={window.innerWidth}
          height={window.innerHeight}
          recycle={false}
          numberOfPieces={200}
          colors={['#ff69b4', '#ff1493', '#ffc0cb', '#ffb6c1']}
        />
      )}
      
      {/* Audio Player */}
      <AudioPlayer isPlaying={isPlaying} onToggle={setIsPlaying} />
      
      {/* Main Content */}
      <AnimatePresence mode="wait">
        {showDialog ? (
          <NameDialog key="dialog" onSubmit={handleNameSubmit} />
        ) : (
          <div className="main-app-content">
            <MainContent key="main" userData={userData!} />
            
            {/* New Features */}
            <div className="features-section">
              <VirtualGiftBox />
              <MessageWall />
              <SocialShare userName={userData?.name} />
            </div>
          </div>
        )}
      </AnimatePresence>
    </div>
  );
}

export default App;